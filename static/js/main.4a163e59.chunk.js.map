{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Empty","sortFiled","setSortFiled","isReversed","setIsReversed","visibleGoods","goods","sortField","preparedGoods","sort","goodA","goodB","Alphabet","localeCompare","Length","length","reverse","getPreparedGoods","reset","className","type","cn","onClick","reversed","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAKKA,E,oFAAAA,K,oBAAAA,E,gBAAAA,E,UAAAA,M,KAME,IAAMC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgCK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAAmBH,EAASI,OAA9D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAjCR,SACEC,EACAC,EACAJ,GAEA,IAAMK,EAAa,YAAOF,GAqB1B,OAnBIC,GACFC,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQJ,GACN,KAAKX,EAASgB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAASkB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXZ,GACFK,EAAcQ,UAGTR,EAOcS,CACnBpB,EACAI,EACAE,GAGIe,EAAQjB,GAAaE,EAO3B,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYpB,IAAcL,EAASgB,WAEvCU,QAAS,kBAAMpB,EAAaN,EAASgB,WANvC,iCAWA,wBACEQ,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYpB,IAAcL,EAASkB,SAEvCQ,QAAS,kBAAMpB,EAAaN,EAASkB,SANvC,4BAWA,wBACEM,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAalB,IAEjBmB,QAAS,kBAAMlB,GAAc,SAAAmB,GAAQ,OAAKA,MAN5C,qBAUEL,GAEI,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA7CM,WAClBpB,EAAaN,EAASI,OACtBI,GAAc,IAwCJ,sBAWR,6BACGC,EAAamB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCvHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4a163e59.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport React, { useState } from 'react';\nimport cn from 'classnames';\n\nenum SortType {\n  Alphabet = 'alphabet',\n  Length = 'length',\n  Empty = '',\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortType,\n  isReversed: boolean,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((goodA, goodB) => {\n      switch (sortField) {\n        case SortType.Alphabet:\n          return goodA.localeCompare(goodB);\n\n        case SortType.Length:\n          return goodA.length - goodB.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortFiled, setSortFiled] = useState<SortType>(SortType.Empty);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    sortFiled,\n    isReversed,\n  );\n\n  const reset = sortFiled || isReversed;\n\n  const handleReset = () => {\n    setSortFiled(SortType.Empty);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortFiled !== SortType.Alphabet },\n          )}\n          onClick={() => setSortFiled(SortType.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            { 'is-light': sortFiled !== SortType.Length },\n          )}\n          onClick={() => setSortFiled(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(reversed => !reversed)}\n        >\n          Reverse\n        </button>\n        {(reset)\n            && (\n              <button\n                type=\"button\"\n                className=\"button is-danger is-light\"\n                onClick={handleReset}\n              >\n                Reset\n              </button>\n            )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}